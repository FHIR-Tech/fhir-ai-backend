// <auto-generated />
using System;
using HealthTech.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthTech.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250828154415_AddAuthenticationTables")]
    partial class AddAuthenticationTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealthTech.Domain.Entities.AuditEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EventData")
                        .HasColumnType("jsonb");

                    b.Property<string>("EventSubtype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Outcome")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ResourceType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "EventTime");

                    b.HasIndex("TenantId", "UserId", "EventTime");

                    b.ToTable("audit_events", null, t =>
                        {
                            t.HasComment("Audit events for compliance tracking");
                        });
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.FhirResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FhirId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fhir_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("ResourceJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("resource_json");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("resource_type");

                    b.Property<string>("SearchParameters")
                        .HasColumnType("jsonb")
                        .HasColumnName("search_parameters");

                    b.Property<string>("SecurityLabels")
                        .HasColumnType("jsonb")
                        .HasColumnName("security_labels");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version_id");

                    b.HasKey("Id");

                    b.HasIndex("SearchParameters")
                        .HasDatabaseName("idx_fhir_resources_search_params");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchParameters"), "gin");

                    b.HasIndex("SecurityLabels")
                        .HasDatabaseName("idx_fhir_resources_security_labels");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SecurityLabels"), "gin");

                    b.HasIndex("Tags")
                        .HasDatabaseName("idx_fhir_resources_tags");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Tags"), "gin");

                    b.HasIndex("TenantId", "LastUpdated")
                        .HasDatabaseName("idx_fhir_resources_last_updated");

                    b.HasIndex("TenantId", "ResourceType")
                        .HasDatabaseName("idx_fhir_resources_tenant_type");

                    b.HasIndex("TenantId", "ResourceType", "FhirId")
                        .HasDatabaseName("idx_fhir_resources_tenant_id");

                    b.HasIndex("TenantId", "ResourceType", "FhirId", "VersionId")
                        .IsUnique()
                        .HasDatabaseName("fhir_resources_tenant_id_resource_type_fhir_id_version_id_key");

                    b.ToTable("fhir_resources", null, t =>
                        {
                            t.HasComment("FHIR resources stored as JSONB");
                        });
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ConsentGiven")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("consent_given");

                    b.Property<string>("ConsentGivenBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("emergency_contact_name");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("emergency_contact_phone");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emergency_contact_relationship");

                    b.Property<string>("FhirPatientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fhir_patient_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConsentGiven")
                        .HasDatabaseName("idx_patients_consent");

                    b.HasIndex("FhirPatientId")
                        .HasDatabaseName("idx_patients_fhir_patient_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_patients_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_patients_tenant_id");

                    b.HasIndex("LastName", "FirstName")
                        .HasDatabaseName("idx_patients_name");

                    b.HasIndex("TenantId", "FhirPatientId")
                        .IsUnique()
                        .HasDatabaseName("uk_patients_tenant_fhir_id");

                    b.ToTable("patients", null, t =>
                        {
                            t.HasCheckConstraint("ck_patients_gender", "gender IN ('Male', 'Female', 'Other', 'Unknown')");

                            t.HasCheckConstraint("ck_patients_status", "status IN ('Active', 'Inactive', 'Deceased', 'Unknown', 'Transferred', 'Discharged')");
                        });
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.PatientAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_level");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmergencyJustification")
                        .HasColumnType("text")
                        .HasColumnName("emergency_justification");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime>("GrantedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("granted_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("granted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmergencyAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_emergency_access");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_enabled");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevel")
                        .HasDatabaseName("idx_patient_accesses_access_level");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_patient_accesses_expires_at");

                    b.HasIndex("GrantedAt")
                        .HasDatabaseName("idx_patient_accesses_granted_at");

                    b.HasIndex("IsEmergencyAccess")
                        .HasDatabaseName("idx_patient_accesses_emergency");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("idx_patient_accesses_patient_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_patient_accesses_tenant_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_patient_accesses_user_id");

                    b.HasIndex("PatientId", "UserId", "AccessLevel")
                        .IsUnique()
                        .HasDatabaseName("uk_patient_accesses_unique");

                    b.ToTable("patient_accesses", null, t =>
                        {
                            t.HasCheckConstraint("ck_patient_accesses_access_level", "access_level IN ('Read', 'Write', 'Admin', 'Emergency', 'Research', 'Analytics')");
                        });
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.PatientConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ConsentIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("consent_ip_address");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("consent_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime>("GrantedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("granted_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("granted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsElectronicConsent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_electronic_consent");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("revoked_by");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConsentType")
                        .HasDatabaseName("idx_patient_consents_consent_type");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_patient_consents_expires_at");

                    b.HasIndex("GrantedAt")
                        .HasDatabaseName("idx_patient_consents_granted_at");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_patient_consents_is_active");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("idx_patient_consents_patient_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_patient_consents_tenant_id");

                    b.HasIndex("PatientId", "ConsentType", "IsActive")
                        .HasDatabaseName("idx_patient_consents_active");

                    b.ToTable("patient_consents", null, t =>
                        {
                            t.HasCheckConstraint("ck_patient_consents_consent_type", "consent_type IN ('DataSharing', 'ResearchParticipation', 'EmergencyAccess', 'FamilyAccess', 'ThirdPartyAccess', 'MarketingCommunications', 'AutomatedDecisionMaking', 'DataPortability', 'DataRetention', 'TreatmentConsent')");
                        });
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastLoginIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_until");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PractitionerId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("practitioner_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_users_email");

                    b.HasIndex("PractitionerId")
                        .IsUnique()
                        .HasDatabaseName("idx_users_practitioner_id");

                    b.HasIndex("Role")
                        .HasDatabaseName("idx_users_role");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_users_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_users_tenant_id");

                    b.HasIndex("Username")
                        .HasDatabaseName("idx_users_username");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique()
                        .HasDatabaseName("uk_users_tenant_email");

                    b.HasIndex("TenantId", "Username")
                        .IsUnique()
                        .HasDatabaseName("uk_users_tenant_username");

                    b.ToTable("users", null, t =>
                        {
                            t.HasCheckConstraint("ck_users_role", "role IN ('SystemAdministrator', 'HealthcareProvider', 'Nurse', 'Patient', 'FamilyMember', 'Researcher', 'ITSupport', 'ReadOnlyUser', 'DataAnalyst', 'ITAdministrator', 'Guest')");

                            t.HasCheckConstraint("ck_users_status", "status IN ('Active', 'Inactive', 'Locked', 'Suspended', 'Pending', 'Expired', 'PendingVerification', 'Deleted')");
                        });
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.UserScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime>("GrantedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("granted_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("granted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_revoked");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("scope");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_user_scopes_expires_at");

                    b.HasIndex("GrantedAt")
                        .HasDatabaseName("idx_user_scopes_granted_at");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("idx_user_scopes_is_revoked");

                    b.HasIndex("Scope")
                        .HasDatabaseName("idx_user_scopes_scope");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_user_scopes_tenant_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_scopes_user_id");

                    b.HasIndex("UserId", "Scope")
                        .IsUnique()
                        .HasDatabaseName("uk_user_scopes_unique");

                    b.ToTable("user_scopes", (string)null);
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("created_ip_address");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_revoked");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("text")
                        .HasColumnName("revocation_reason");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("session_token");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_id");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_user_sessions_expires_at");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("idx_user_sessions_is_revoked");

                    b.HasIndex("LastAccessedAt")
                        .HasDatabaseName("idx_user_sessions_last_accessed_at");

                    b.HasIndex("RefreshToken")
                        .HasDatabaseName("idx_user_sessions_refresh_token");

                    b.HasIndex("SessionToken")
                        .IsUnique()
                        .HasDatabaseName("uk_user_sessions_session_token");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_user_sessions_tenant_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_sessions_user_id");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.PatientAccess", b =>
                {
                    b.HasOne("HealthTech.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientAccesses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthTech.Domain.Entities.User", "User")
                        .WithMany("PatientAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.PatientConsent", b =>
                {
                    b.HasOne("HealthTech.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientConsents")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.UserScope", b =>
                {
                    b.HasOne("HealthTech.Domain.Entities.User", "User")
                        .WithMany("UserScopes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("HealthTech.Domain.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.Patient", b =>
                {
                    b.Navigation("PatientAccesses");

                    b.Navigation("PatientConsents");
                });

            modelBuilder.Entity("HealthTech.Domain.Entities.User", b =>
                {
                    b.Navigation("PatientAccesses");

                    b.Navigation("UserScopes");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
