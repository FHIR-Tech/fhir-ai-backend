# FHIR-AI Backend CI/CD Pipeline
# This workflow builds, tests, and deploys the FHIR-AI Backend application
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: FHIR-AI Backend CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  DOTNET_VERSION: '8.0.x'
  POSTGRES_VERSION: '14'
  SOLUTION_FILE: 'HealthTech.FHIR-AI.sln'

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: fhir-ai-test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js (for scripts)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: scripts/package-lock.json
      if: hashFiles('scripts/package.json') != ''

    - name: Install Node.js dependencies
      run: |
        if [ -f "scripts/package.json" ]; then
          cd scripts
          npm ci
        else
          echo "No package.json found in scripts directory, skipping npm install"
        fi
      if: hashFiles('scripts/package.json') != ''

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: coverage/

    - name: Run integration tests (if available)
      run: |
        # Wait for PostgreSQL to be ready
        sleep 10
        # Run integration tests with database connection
        dotnet test tests/HealthTech.API.Tests/HealthTech.API.Tests.csproj --no-build --configuration Release --verbosity normal --filter "Category=Integration"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=fhir-ai-test;Username=postgres;Password=test_password"

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Job
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: fhir-ai-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/docker-image.tar
      if: always()

  # Code Quality Check
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install SonarCloud scanner
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      if: secrets.SONAR_TOKEN != ''

    - name: Run SonarCloud analysis
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"fhir-ai-backend" /o:"your-organization" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build ${{ env.SOLUTION_FILE }} --configuration Release
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      if: secrets.SONAR_TOKEN != ''

    - name: Skip SonarCloud analysis
      run: echo "Skipping SonarCloud analysis - SONAR_TOKEN not provided"
      if: secrets.SONAR_TOKEN == ''

  # Documentation Check
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation structure
      run: |
        # Check if required documentation files exist
        test -f "docs/README.md" || (echo "Missing docs/README.md" && exit 1)
        test -f "docs/INDEX.md" || (echo "Missing docs/INDEX.md" && exit 1)
        test -d "docs/api" || (echo "Missing docs/api directory" && exit 1)
        test -d "docs/architecture" || (echo "Missing docs/architecture directory" && exit 1)
        echo "Documentation structure check passed"

    - name: Validate API documentation
      run: |
        # Check if API documentation exists
        if [ -f "docs/api/README.md" ]; then
          echo "API documentation found"
        else
          echo "Warning: API documentation not found"
        fi

  # Deploy to Staging (Manual trigger)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: Deploy to Azure, AWS, or other cloud platform

  # Deploy to Production (Manual trigger)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: Deploy to Azure, AWS, or other cloud platform
