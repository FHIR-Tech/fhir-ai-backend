{
  "name": "fhir-ai-backend",
  "version": "1.0.0",
  "description": "FHIR-AI Backend - HealthTech FHIR-compliant backend with AI integration capabilities",
  "main": "index.js",
  "scripts": {
    "dev": "docker-compose up --build",
    "dev:detached": "docker-compose up -d --build",
    "dev:api": "cd src/HealthTech.API && dotnet run",
    "dev:watch": "cd src/HealthTech.API && dotnet watch run",
    "stop": "docker-compose down",
    "stop:volumes": "docker-compose down -v",
    "restart": "docker-compose restart",
    "logs": "docker-compose logs -f",
    "logs:api": "docker-compose logs -f api",
    "logs:db": "docker-compose logs -f postgres",
    "logs:redis": "docker-compose logs -f redis",
    "build": "docker-compose build",
    "build:api": "docker-compose build api",
    "clean": "docker-compose down -v --remove-orphans && docker system prune -f",
    "db:up": "docker-compose up postgres -d",
    "db:down": "docker-compose stop postgres",
    "db:reset": "docker-compose down -v && docker-compose up postgres -d",
    "db:init": "docker exec -i fhir-ai-postgres psql -U postgres -d fhir-ai < scripts/init-db.sql",
    "db:backup": "docker exec fhir-ai-postgres pg_dump -U postgres fhir-ai > backup_$(date +%Y%m%d_%H%M%S).sql",
    "db:restore": "echo 'Usage: docker exec -i fhir-ai-postgres psql -U postgres -d fhir-ai < backup_file.sql'",
    "test": "dotnet test",
    "test:api": "dotnet test tests/HealthTech.API.Tests/",
    "test:app": "dotnet test tests/HealthTech.Application.Tests/",
    "test:domain": "dotnet test tests/HealthTech.Domain.Tests/",
    "test:coverage": "dotnet test --collect:\"XPlat Code Coverage\" --results-directory ./coverage",
    "test:watch": "dotnet test --watch",
    "sample:data": "node scripts/sample-data-api.js",
    "sample:test": "node scripts/test-sample-values.js",
    "sample:single": "bash scripts/test-single-values.sh",
    "sample:batch": "scripts/run-sample-data.bat",
    "sample:ps1": "powershell -ExecutionPolicy Bypass -File scripts/sample-data-api.ps1",
    "migrate": "cd src/HealthTech.API && dotnet ef database update",
    "migrate:add": "cd src/HealthTech.API && dotnet ef migrations add",
    "migrate:remove": "cd src/HealthTech.API && dotnet ef migrations remove",
    "migrate:script": "cd src/HealthTech.API && dotnet ef migrations script",
    "swagger": "echo 'Swagger UI available at: https://localhost:5000/swagger'",
    "health": "curl -f http://localhost:5000/health || echo 'Health check failed'",
    "health:docker": "docker exec fhir-ai-api curl -f http://localhost/health || echo 'Health check failed'",
    "lint": "dotnet format --verify-no-changes",
    "lint:fix": "dotnet format",
    "analyze": "dotnet build --verbosity normal",
    "publish": "dotnet publish src/HealthTech.API -c Release -o ./publish",
    "docker:publish": "docker build -t fhir-ai-backend:latest .",
    "docker:push": "echo 'Push to registry: docker tag fhir-ai-backend:latest your-registry/fhir-ai-backend:latest && docker push your-registry/fhir-ai-backend:latest'",
    "setup": "npm run db:up && sleep 10 && npm run db:init && npm run dev:api",
    "setup:full": "npm run db:up && sleep 10 && npm run db:init && npm run sample:data && npm run dev:api",
    "reset": "npm run stop:volumes && npm run setup",
    "reset:full": "npm run stop:volumes && npm run setup:full",
    "status": "docker-compose ps",
    "shell:api": "docker exec -it fhir-ai-api /bin/bash",
    "shell:db": "docker exec -it fhir-ai-postgres psql -U postgres -d fhir-ai",
    "shell:redis": "docker exec -it fhir-ai-redis redis-cli",
    "monitor": "echo 'Monitoring containers...' && docker stats",
    "logs:all": "docker-compose logs --tail=100",
    "logs:errors": "docker-compose logs --tail=100 | grep -i error",
    "logs:warnings": "docker-compose logs --tail=100 | grep -i warning",
    "help": "echo 'Available scripts:' && npm run",
    "version": "echo 'FHIR-AI Backend v1.0.0'"
  },
  "keywords": [
    "fhir",
    "healthcare",
    "ai",
    "dotnet",
    "postgresql",
    "docker",
    "healthtech",
    "hl7",
    "smart-on-fhir"
  ],
  "author": "FHIR-Tech Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/FHIR-Tech/fhir-ai-backend.git"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "dependencies": {
    "axios": "^1.6.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.0"
  },
  "config": {
    "apiUrl": "https://localhost:52871",
    "tenantId": "f66ddff8-fb9a-4d5b-9a44-194c62389842",
    "fhirScopes": "user/* patient/*"
  },
  "scripts-info": {
    "dev": "Start all services in development mode with hot reload",
    "dev:detached": "Start all services in background mode",
    "dev:api": "Run only the API service locally",
    "dev:watch": "Run API with file watching for hot reload",
    "stop": "Stop all services",
    "stop:volumes": "Stop all services and remove volumes",
    "restart": "Restart all services",
    "logs": "Show logs from all services",
    "logs:api": "Show logs from API service only",
    "logs:db": "Show logs from PostgreSQL service only",
    "logs:redis": "Show logs from Redis service only",
    "build": "Build all Docker images",
    "build:api": "Build only the API Docker image",
    "clean": "Clean up all containers, volumes, and images",
    "db:up": "Start only the PostgreSQL database",
    "db:down": "Stop the PostgreSQL database",
    "db:reset": "Reset the database (remove volumes and restart)",
    "db:init": "Initialize database with schema and sample data",
    "db:backup": "Create a backup of the database",
    "db:restore": "Restore database from backup (usage shown)",
    "test": "Run all tests",
    "test:api": "Run API tests only",
    "test:app": "Run Application layer tests only",
    "test:domain": "Run Domain layer tests only",
    "test:coverage": "Run tests with code coverage",
    "test:watch": "Run tests in watch mode",
    "sample:data": "Populate database with sample FHIR data",
    "sample:test": "Test sample values and API connectivity",
    "sample:single": "Test single FHIR resource values",
    "sample:batch": "Run sample data population (Windows batch)",
    "sample:ps1": "Run sample data population (PowerShell)",
    "migrate": "Apply database migrations",
    "migrate:add": "Add new migration (requires name)",
    "migrate:remove": "Remove last migration",
    "migrate:script": "Generate migration script",
    "swagger": "Show Swagger UI URL",
    "health": "Check API health endpoint",
    "health:docker": "Check API health from within container",
    "lint": "Check code formatting",
    "lint:fix": "Fix code formatting",
    "analyze": "Analyze code for issues",
    "publish": "Publish application for deployment",
    "docker:publish": "Build production Docker image",
    "docker:push": "Show instructions for pushing to registry",
    "setup": "Initial setup (database + API)",
    "setup:full": "Full setup with sample data",
    "reset": "Reset everything and start fresh",
    "reset:full": "Reset everything with sample data",
    "status": "Show container status",
    "shell:api": "Open shell in API container",
    "shell:db": "Open PostgreSQL shell",
    "shell:redis": "Open Redis CLI",
    "monitor": "Monitor container resource usage",
    "logs:all": "Show last 100 log lines from all services",
    "logs:errors": "Show error logs only",
    "logs:warnings": "Show warning logs only",
    "help": "Show this help information",
    "version": "Show version information"
  }
}
